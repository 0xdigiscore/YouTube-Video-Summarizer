{"version":3,"sources":["components/VideoSummarizer.tsx","components/ApiKeyInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["VideoSummarizer","_ref","onSummarize","_useState","useState","_useState2","_slicedToArray","videoId","setVideoId","_useState3","_useState4","summary","setSummary","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","result","wrap","_context","prev","next","preventDefault","sent","stop","_x","apply","arguments","_jsxs","className","children","_jsx","onSubmit","htmlFor","type","id","value","onChange","target","ApiKeyInput","onApiKeySubmit","apiKey","setApiKey","App","summarizeVideo","abrupt","submittedApiKey","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5040e8d9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\ninterface VideoSummarizerProps {\n  onSummarize: (videoId: string) => Promise<string>;\n}\n\nexport const VideoSummarizer: React.FC<VideoSummarizerProps> = ({ onSummarize }) => {\n  const [videoId, setVideoId] = useState(\"\");\n  const [summary, setSummary] = useState(\"\");\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const result = await onSummarize(videoId);\n    setSummary(result);\n  };\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-2xl mb-4\">YouTube Video Summarizer</h1>\n      <form onSubmit={handleSubmit} className=\"mb-4\">\n        <label htmlFor=\"videoId\" className=\"block mb-2\">\n          YouTube Video ID:\n        </label>\n        <input\n          type=\"text\"\n          id=\"videoId\"\n          value={videoId}\n          onChange={(e) => setVideoId(e.target.value)}\n          className=\"border-2 p-2 w-full\"\n        />\n        <button type=\"submit\" className=\"bg-blue-500 text-white p-2 mt-4\">\n          Summarize Video\n        </button>\n      </form>\n      {summary && <div className=\"border p-4\">{summary}</div>}\n    </div>\n  );\n};\n","// src/components/ApiKeyInput.tsx\nimport React, { useState } from \"react\";\n\ninterface ApiKeyInputProps {\n  onApiKeySubmit: (apiKey: string) => void;\n}\n\nexport const ApiKeyInput: React.FC<ApiKeyInputProps> = ({ onApiKeySubmit }) => {\n  const [apiKey, setApiKey] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onApiKeySubmit(apiKey);\n  };\n\n  return (\n    <div className=\"p-4\">\n      <h2 className=\"text-xl mb-4\">Enter OpenAI API Key</h2>\n      <form onSubmit={handleSubmit} className=\"mb-4\">\n        <label htmlFor=\"apiKey\" className=\"block mb-2\">\n          API Key:\n        </label>\n        <input\n          type=\"password\"\n          id=\"apiKey\"\n          value={apiKey}\n          onChange={(e) => setApiKey(e.target.value)}\n          className=\"border-2 p-2 w-full\"\n        />\n        <button type=\"submit\" className=\"bg-blue-500 text-white p-2 mt-4\">\n          Submit API Key\n        </button>\n      </form>\n    </div>\n  );\n};\n","// src/App.tsx\nimport React, { useState } from \"react\";\nimport { VideoSummarizer } from \"./components/VideoSummarizer\";\nimport { ApiKeyInput } from \"./components/ApiKeyInput\";\nimport \"./index.css\";\n\nconst App: React.FC = () => {\n  const [apiKey, setApiKey] = useState(\"\");\n\n  const onApiKeySubmit = (submittedApiKey: string) => {\n    setApiKey(submittedApiKey);\n  };\n\n  const summarizeVideo = async (videoId: string) => {\n    if (!apiKey) {\n      return \"Please enter your OpenAI API key.\";\n    }\n\n    // TODO: Use YouTube Data API and OpenAI API to generate video summary.\n    // Use the apiKey variable when making API calls.\n    return \"This is a placeholder summary for video ID: \" + videoId;\n  };\n\n  return (\n    <div className=\"App\">\n      <ApiKeyInput onApiKeySubmit={onApiKeySubmit} />\n      <VideoSummarizer onSummarize={summarizeVideo} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && typeof onPerfEntry === \"function\") {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}